# Snapshot do Frontend — 2025-08-11T13:40:42+00:00

## Versões
node: v22.17.0
npm:  9.8.1

## package.json
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "axios": "^1.11.0",
    "classnames": "^2.5.1",
    "date-fns": "^4.1.0",
    "js-cookie": "^3.0.5",
    "react": "^19.1.0",
    "react-datepicker": "^8.4.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8",
    "react-hook-form": "^7.61.1",
    "react-hot-toast": "^2.5.2",
    "react-router-dom": "^7.7.1",
    "react-select": "^5.10.2",
    "recharts": "^3.1.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@types/js-cookie": "^3.0.6",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/uuid": "^10.0.0",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}

## vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

## tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ],
}
## tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

## Árvore de arquivos (src, profundidade 2)
src/App.css
src/App.tsx
src/assets/react.svg
src/index.css
src/main.tsx
src/pages/Arquitetura.tsx
src/pages/Compras.tsx
src/pages/Configuracoes.tsx
src/pages/Contratos.tsx
src/pages/CrmComercial.tsx
src/pages/Dashboard.tsx
src/pages/Empreendimentos.tsx
src/pages/Engenharia.tsx
src/pages/Financeiro.tsx
src/pages/Imoveis.tsx
src/pages/Juridico.tsx
src/pages/Pessoas.tsx
src/pages/PosVenda.tsx
src/pages/Relatorios.tsx
src/vite-env.d.ts

### FILE: src/main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

### FILE: src/App.css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Base styles */
@layer base {
  html {
    font-family: 'Inter', system-ui, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body {
    @apply bg-gray-50 text-gray-900;
    line-height: 1.6;
  }

  * {
    @apply border-gray-200;
  }
}

/* Component styles */
@layer components {
  /* Card */
  .card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200;
  }

  .card-hover {
    @apply transition-all duration-200 hover:shadow-md hover:border-gray-300;
  }

  /* Buttons */
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
  }

  .btn-primary {
    @apply btn bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;
  }

  .btn-secondary {
    @apply btn bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500;
  }

  .btn-success {
    @apply btn bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;
  }

  .btn-warning {
    @apply btn bg-yellow-600 text-white hover:bg-yellow-700 focus:ring-yellow-500;
  }

  .btn-danger {
    @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
  }

  .btn-outline {
    @apply btn bg-white text-gray-700 border-gray-300 hover:bg-gray-50 focus:ring-blue-500;
  }

  /* Form elements */
  .form-input {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm;
  }

  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }

  .form-error {
    @apply text-sm text-red-600 mt-1;
  }

  .form-help {
    @apply text-sm text-gray-500 mt-1;
  }

  /* Table */
  .table {
    @apply min-w-full divide-y divide-gray-200;
  }

  .table-header {
    @apply bg-gray-50;
  }

  .table-header-cell {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }

  .table-body {
    @apply bg-white divide-y divide-gray-200;
  }

  .table-row {
    @apply hover:bg-gray-50 transition-colors duration-150;
  }

  .table-cell {
    @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;
  }

  /* Status badges */
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .badge-success {
    @apply badge bg-green-100 text-green-800;
  }

  .badge-warning {
    @apply badge bg-yellow-100 text-yellow-800;
  }

  .badge-danger {
    @apply badge bg-red-100 text-red-800;
  }

  .badge-info {
    @apply badge bg-blue-100 text-blue-800;
  }

  .badge-gray {
    @apply badge bg-gray-100 text-gray-800;
  }

  /* Loading states */
  .loading-spinner {
    @apply animate-spin rounded-full border-2 border-gray-300 border-t-blue-600;
  }

  .skeleton {
    @apply bg-gray-200 rounded animate-pulse;
  }
}
### FILE: src/App.tsx
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import './App.css';

// Components
import Sidebar from './components/layout/Sidebar';
import Header from './components/layout/Header';
import LoginPage from './pages/auth/LoginPage';

// Pages
import Dashboard from './pages/Dashboard';
import Pessoas from './pages/Pessoas';
import Empreendimentos from './pages/Empreendimentos';
import CrmComercial from './pages/CrmComercial';
import Juridico from './pages/Juridico';
import Financeiro from './pages/Financeiro';
import Compras from './pages/Compras';
import Engenharia from './pages/Engenharia';
import Arquitetura from './pages/Arquitetura';
import PosVenda from './pages/PosVenda';
import Configuracoes from './pages/Configuracoes';

// Types - Renomeado para evitar conflitos
interface AppUser {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'corretor' | 'gerente' | 'engenheiro' | 'arquiteto' | 'juridico' | 'financeiro';
  avatar?: string;
}

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<AppUser | null>(null);
  const [sidebarOpen, setSidebarOpen] = useState<boolean>(true);

  const handleLogin = (userData: AppUser) => {
    setUser(userData);
    setIsAuthenticated(true);
  };

  const handleLogout = () => {
    setUser(null);
    setIsAuthenticated(false);
  };

  if (!isAuthenticated) {
    return <LoginPage onLogin={handleLogin} />;
  }

  return (
    <Router>
      <div className="flex h-screen bg-gray-50">
        {/* Sidebar */}
        <Sidebar 
          isOpen={sidebarOpen} 
          onToggle={() => setSidebarOpen(!sidebarOpen)}
          userRole={user?.role || 'admin'}
        />

        {/* Main Content */}
        <div className={`flex-1 flex flex-col overflow-hidden transition-all duration-300 ${
          sidebarOpen ? 'ml-64' : 'ml-16'
        }`}>
          {/* Header */}
          <Header 
            user={user}
            onLogout={handleLogout}
            onMenuToggle={() => setSidebarOpen(!sidebarOpen)}
          />

          {/* Page Content */}
          <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50 p-6">
            <Routes>
              <Route path="/" element={<Navigate to="/dashboard" replace />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/pessoas/*" element={<Pessoas />} />
              <Route path="/empreendimentos/*" element={<Empreendimentos />} />
              <Route path="/crm/*" element={<CrmComercial />} />
              <Route path="/juridico/*" element={<Juridico />} />
              <Route path="/financeiro/*" element={<Financeiro />} />
              <Route path="/compras/*" element={<Compras />} />
              <Route path="/engenharia/*" element={<Engenharia />} />
              <Route path="/arquitetura/*" element={<Arquitetura />} />
              <Route path="/pos-venda/*" element={<PosVenda />} />
              <Route path="/configuracoes" element={<Configuracoes />} />
            </Routes>
          </main>
        </div>
      </div>
    </Router>
  );
}

export default App;
### FILE: src/pages/Arquitetura.tsx
import React from 'react';

const Arquitetura: React.FC = () => {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Arquitetura (Projetos e Aprovações)</h1>
        <p className="text-gray-600">Centralização de projetos técnicos e aprovações</p>
      </div>
      <div className="card p-6">
        <p className="text-gray-600">Módulo Arquitetura será implementado aqui.</p>
        <div className="mt-4 space-y-2 text-sm text-gray-500">
          <p>• Upload e versionamento de arquivos (DWG, PDF, BIM)</p>
          <p>• Classificação por disciplina (arquitetônico, estrutural, elétrico)</p>
          <p>• Compatibilização e registro de conflitos</p>
          <p>• Comunicação com Engenharia e Jurídico</p>
          <p>• Controle de RRT/ART dos responsáveis</p>
        </div>
      </div>
    </div>
  );
};

export default Arquitetura;
### FILE: src/pages/Compras.tsx
import React from 'react';

const Compras: React.FC = () => {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Compras (Para Obras)</h1>
        <p className="text-gray-600">Gestão de requisições, cotações e pedidos de compra</p>
      </div>
      <div className="card p-6">
        <p className="text-gray-600">Módulo Compras será implementado aqui.</p>
        <div className="mt-4 space-y-2 text-sm text-gray-500">
          <p>• Requisições de compra por obra/setor</p>
          <p>• Cotações múltiplas com comparativo</p>
          <p>• Workflow de aprovação configurável</p>
          <p>• Pedidos de compra automatizados</p>
          <p>• Integração com almoxarifado e financeiro</p>
        </div>
      </div>
    </div>
  );
};

export default Compras;
### FILE: src/pages/Configuracoes.tsx
import React from 'react';

const Configuracoes: React.FC = () => {
  return (
    <div>
      <h1>Configurações</h1>
      <p>Página de configurações será implementada aqui.</p>
    </div>
  );
};

export default Configuracoes;
### FILE: src/pages/Contratos.tsx
import React from 'react';

const Contratos: React.FC = () => {
  return (
    <div>
      <h1>Contratos</h1>
      <p>Página de contratos será implementada aqui.</p>
    </div>
  );
};

export default Contratos;
### FILE: src/pages/CrmComercial.tsx
import React, { useState, useEffect, useMemo, useCallback, createContext, useContext, useReducer } from 'react';
import {
  Users, Target, Phone, Mail, MessageSquare, Eye, Edit2, Plus, X, Search,
  DollarSign, Calendar, Clock, Building, MapPin, Tag, User, Star, Filter,
  AlertTriangle, CheckCircle, TrendingUp, MoreVertical, Download, RefreshCw,
  ArrowUpRight, ArrowDownRight, BarChart3, PieChart, Activity, Award, Zap
} from 'lucide-react';

// ==================== INTERFACES E TIPOS ====================

interface Cliente {
  id: string;
  nome: string;
  email: string;
  telefone: string;
  whatsapp?: string;
  origem: 'site' | 'indicacao' | 'telemarketing' | 'redes-sociais' | 'evento' | 'outros';
  status: 'lead' | 'contato' | 'interessado' | 'negociacao' | 'proposta' | 'vendido' | 'perdido';
  prioridade: 'baixa' | 'media' | 'alta';
  valorOrcamento?: number;
  observacoes?: string;
  responsavel: string;
  dataCriacao: string;
  ultimoContato?: string;
  proximoFollowUp?: string;
  empreendimentoInteresse?: string;
  tags?: string[];
  score?: number;
  temperatura: 'frio' | 'morno' | 'quente';
  tempoResposta?: number;
  numeroContatos?: number;
  cidade?: string;
}

interface Atividade {
  id: string;
  clienteId: string;
  tipo: 'ligacao' | 'email' | 'whatsapp' | 'reuniao' | 'visita' | 'proposta' | 'follow-up' | 'nota';
  descricao: string;
  data: string;
  responsavel: string;
  status: 'agendado' | 'concluido' | 'cancelado' | 'em-andamento';
  observacoes?: string;
  duracao?: number;
  resultado?: 'positivo' | 'neutro' | 'negativo';
  proximaAcao?: string;
  dataProximaAcao?: string;
  prioridade?: 'baixa' | 'media' | 'alta';
}

interface FiltrosCRM {
  busca: string;
  status: string;
  origem: string;
  responsavel: string;
  prioridade: string;
  temperatura: string;
  dataInicio: string;
  dataFim: string;
  valorMinimo: string;
  valorMaximo: string;
  empreendimento: string;
  cidade: string;
  tags: string[];
}

interface CRMState {
  clientes: Cliente[];
  atividades: Atividade[];
  filtros: FiltrosCRM;
  loading: boolean;
  error: string | null;
  clienteSelecionado: Cliente | null;
  modalAtivo: string | null;
  notificacoes: Array<{
    id: string;
    type: 'success' | 'error' | 'warning' | 'info';
    title: string;
    message: string;
    timestamp: Date;
    read: boolean;
  }>;
}

// ==================== DADOS MOCK ====================

const mockClientes: Cliente[] = [
  {
    id: '1',
    nome: 'Maria Silva Santos',
    email: 'maria.silva@email.com',
    telefone: '(48) 99999-1234',
    whatsapp: '48999991234',
    origem: 'site',
    status: 'interessado',
    prioridade: 'alta',
    valorOrcamento: 450000,
    responsavel: 'João Corretor',
    dataCriacao: '2025-01-15',
    ultimoContato: '2025-01-28',
    proximoFollowUp: '2025-01-31',
    empreendimentoInteresse: 'Residencial Solar das Flores',
    tags: ['qualificado', 'urgente', 'financiamento-aprovado'],
    score: 85,
    temperatura: 'quente',
    tempoResposta: 2,
    numeroContatos: 5,
    cidade: 'Florianópolis'
  },
  {
    id: '2',
    nome: 'Carlos Eduardo Lima',
    email: 'carlos.lima@empresa.com',
    telefone: '(48) 98888-5678',
    whatsapp: '48988885678',
    origem: 'indicacao',
    status: 'negociacao',
    prioridade: 'alta',
    valorOrcamento: 680000,
    responsavel: 'Ana Corretora',
    dataCriacao: '2025-01-10',
    ultimoContato: '2025-01-29',
    proximoFollowUp: '2025-02-01',
    empreendimentoInteresse: 'Comercial Business Center',
    tags: ['investidor', 'decisor', 'alta-renda'],
    score: 92,
    temperatura: 'quente',
    tempoResposta: 1,
    numeroContatos: 8,
    cidade: 'Florianópolis'
  },
  {
    id: '3',
    nome: 'Pedro Santos Oliveira',
    email: 'pedro.oliveira@gmail.com',
    telefone: '(48) 97777-9012',
    origem: 'redes-sociais',
    status: 'lead',
    prioridade: 'media',
    responsavel: 'Maria Corretora',
    dataCriacao: '2025-01-25',
    ultimoContato: '2025-01-26',
    proximoFollowUp: '2025-01-30',
    tags: ['novo', 'primeira-conversa'],
    score: 45,
    temperatura: 'morno',
    tempoResposta: 12,
    numeroContatos: 1,
    cidade: 'São José'
  },
  {
    id: '4',
    nome: 'Ana Paula Costa',
    email: 'anapaula@email.com',
    telefone: '(48) 96666-3456',
    whatsapp: '48966663456',
    origem: 'telemarketing',
    status: 'proposta',
    prioridade: 'alta',
    valorOrcamento: 320000,
    responsavel: 'João Corretor',
    dataCriacao: '2025-01-20',
    ultimoContato: '2025-01-29',
    proximoFollowUp: '2025-02-02',
    empreendimentoInteresse: 'Residencial Solar das Flores',
    tags: ['financiamento', 'primeira-casa', 'jovem'],
    score: 78,
    temperatura: 'quente',
    tempoResposta: 3,
    numeroContatos: 6,
    cidade: 'Florianópolis'
  },
  {
    id: '5',
    nome: 'Roberto Ferreira',
    email: 'roberto.ferreira@gmail.com',
    telefone: '(48) 95555-7890',
    origem: 'evento',
    status: 'contato',
    prioridade: 'media',
    valorOrcamento: 280000,
    responsavel: 'Ana Corretora',
    dataCriacao: '2025-01-22',
    ultimoContato: '2025-01-27',
    proximoFollowUp: '2025-01-31',
    empreendimentoInteresse: 'Residencial Jardim das Águas',
    tags: ['primeira-compra', 'evento-feira'],
    score: 62,
    temperatura: 'morno',
    tempoResposta: 6,
    numeroContatos: 3,
    cidade: 'São José'
  },
  {
    id: '6',
    nome: 'Fernanda Costa',
    email: 'fernanda.costa@outlook.com',
    telefone: '(48) 94444-5678',
    whatsapp: '48944445678',
    origem: 'site',
    status: 'vendido',
    prioridade: 'alta',
    valorOrcamento: 550000,
    responsavel: 'João Corretor',
    dataCriacao: '2024-12-15',
    ultimoContato: '2025-01-25',
    empreendimentoInteresse: 'Residencial Solar das Flores',
    tags: ['cliente-vip', 'concluido', 'indicadora'],
    score: 95,
    temperatura: 'quente',
    tempoResposta: 1,
    numeroContatos: 12,
    cidade: 'Florianópolis'
  }
];

const mockAtividades: Atividade[] = [
  {
    id: '1',
    clienteId: '1',

### FILE: src/pages/Dashboard.tsx
import React from 'react';
import {
  BuildingOfficeIcon,
  UserGroupIcon,
  DocumentTextIcon,
  BanknotesIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  EyeIcon
} from '@heroicons/react/24/outline';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';

const Dashboard: React.FC = () => {
  // Mock data - em produção virá da API
  const metrics = [
    {
      title: 'Total de Imóveis',
      value: '247',
      change: '+12',
      changeType: 'increase' as const,
      icon: BuildingOfficeIcon,
      color: 'blue'
    },
    {
      title: 'Clientes Ativos',
      value: '1,234',
      change: '+45',
      changeType: 'increase' as const,
      icon: UserGroupIcon,
      color: 'green'
    },
    {
      title: 'Contratos Ativos',
      value: '189',
      change: '-3',
      changeType: 'decrease' as const,
      icon: DocumentTextIcon,
      color: 'purple'
    },
    {
      title: 'Receita Mensal',
      value: 'R$ 234.567',
      change: '+8.2%',
      changeType: 'increase' as const,
      icon: BanknotesIcon,
      color: 'orange'
    }
  ];

  const revenueData = [
    { month: 'Jan', receita: 180000, despesas: 120000 },
    { month: 'Fev', receita: 195000, despesas: 115000 },
    { month: 'Mar', receita: 220000, despesas: 130000 },
    { month: 'Abr', receita: 210000, despesas: 125000 },
    { month: 'Mai', receita: 235000, despesas: 140000 },
    { month: 'Jun', receita: 250000, despesas: 135000 },
  ];

  const propertyStatusData = [
    { name: 'Alugados', value: 156, color: '#10B981' },
    { name: 'Disponíveis', value: 67, color: '#3B82F6' },
    { name: 'Em Reforma', value: 15, color: '#F59E0B' },
    { name: 'Vendidos', value: 9, color: '#EF4444' }
  ];

  const contractsData = [
    { month: 'Jan', novos: 12, renovacoes: 8, rescisoes: 3 },
    { month: 'Fev', novos: 15, renovacoes: 10, rescisoes: 2 },
    { month: 'Mar', novos: 18, renovacoes: 12, rescisoes: 4 },
    { month: 'Abr', novos: 14, renovacoes: 9, rescisoes: 1 },
    { month: 'Mai', novos: 20, renovacoes: 15, rescisoes: 3 },
    { month: 'Jun', novos: 22, renovacoes: 18, rescisoes: 2 }
  ];

  const recentActivities = [
    {
      id: 1,
      type: 'contract',
      title: 'Novo contrato assinado',
      description: 'Apartamento Centro - Ref: 001',
      time: '2 horas atrás',
      user: 'Maria Silva'
    },
    {
      id: 2,
      type: 'payment',
      title: 'Pagamento recebido',
      description: 'Aluguel Rua das Flores, 123',
      time: '4 horas atrás',
      user: 'Sistema'
    },
    {
      id: 3,
      type: 'property',
      title: 'Imóvel cadastrado',
      description: 'Casa Jardim América - Ref: 045',
      time: '6 horas atrás',
      user: 'João Santos'
    },
    {
      id: 4,
      type: 'client',
      title: 'Novo cliente cadastrado',
      description: 'Carlos Oliveira - Proprietário',
      time: '1 dia atrás',
      user: 'Ana Costa'
    }
  ];

  const getColorClasses = (color: string) => {
    const colors = {
      blue: 'bg-blue-500 text-blue-600 bg-blue-50',
      green: 'bg-green-500 text-green-600 bg-green-50',
      purple: 'bg-purple-500 text-purple-600 bg-purple-50',
      orange: 'bg-orange-500 text-orange-600 bg-orange-50'
    };
    return colors[color as keyof typeof colors] || colors.blue;
  };

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-gray-600">Visão geral do seu negócio imobiliário</p>
        </div>
        <div className="flex space-x-3">
          <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
            Filtrar Período
          </button>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            Exportar Relatório
          </button>
        </div>
      </div>

      {/* Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {metrics.map((metric, index) => {
          const colorClasses = getColorClasses(metric.color).split(' ');
          return (
            <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{metric.title}</p>
                  <p className="text-2xl font-bold text-gray-900">{metric.value}</p>
                </div>
                <div className={`p-3 rounded-lg ${colorClasses[2]}`}>
                  <metric.icon className={`h-6 w-6 ${colorClasses[1]}`} />
                </div>
              </div>
              <div className="mt-4 flex items-center">
                {metric.changeType === 'increase' ? (
                  <ArrowUpIcon className="h-4 w-4 text-green-500 mr-1" />
                ) : (
                  <ArrowDownIcon className="h-4 w-4 text-red-500 mr-1" />
                )}
                <span className={`text-sm font-medium ${
                  metric.changeType === 'increase' ? 'text-green-500' : 'text-red-500'
                }`}>
                  {metric.change}
                </span>
                <span className="text-sm text-gray-500 ml-1">este mês</span>
              </div>
            </div>
          );
        })}
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Revenue Chart */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Receitas vs Despesas</h3>
            <button className="text-sm text-blue-600 hover:text-blue-800">
              Ver detalhes
            </button>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={revenueData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="month" />
              <YAxis />
              <Tooltip formatter={(value) => `R$ ${Number(value).toLocaleString()}`} />
              <Legend />
              <Line type="monotone" dataKey="receita" stroke="#10B981" strokeWidth={2} name="Receita" />
              <Line type="monotone" dataKey="despesas" stroke="#EF4444" strokeWidth={2} name="Despesas" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Property Status Pie Chart */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Status dos Imóveis</h3>
            <button className="text-sm text-blue-600 hover:text-blue-800">
              Ver todos
            </button>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={propertyStatusData}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={100}
                dataKey="value"
              >
                {propertyStatusData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

### FILE: src/pages/Empreendimentos.tsx
import React, { useState } from 'react';
import {
  Plus, Search, Filter, Building, MapPin, Calendar, Users,
  TrendingUp, Home, Edit2, Eye, Trash2, ArrowLeft, X, Clock,
  Info, Map, FileText, Image, Upload, Download, Shield,
  Wrench, Scale, File, FileImage
} from 'lucide-react';

// Interfaces
interface Localizacao {
  endereco: string;
  cidade: string;
  estado: string;
  cep: string;
  bairro: string;
}

interface Responsaveis {
  tecnico: string;
  comercial: string;
  juridico: string;
}

interface TipoUnidade {
  nome: string;
  tipologia: string;
  areaPrivativa: string;
  vagasGaragem: number;
  quantidade: number;
  preco: string;
}

interface Bloco {
  id: string;
  nome: string;
  totalAndares: number;
  unidadesPorAndar: number;
  tipos: any[];
}

interface Empreendimento {
  id: string;
  nome: string;
  tipo: string;
  status: string;
  imagem: string;
  localizacao: Localizacao;
  unidadesTotal: number;
  unidadesVendidas: number;
  unidadesReservadas: number;
  valorTotal: string;
  valorMedio: number;
  dataInicio: string;
  dataPrevista: string;
  descricao: string;
  responsaveis: Responsaveis;
  tiposUnidade: TipoUnidade[];
  blocos: Bloco[];
  datas: {
    inicio: string;
    previsaoTermino: string;
  };
}

interface FormDataType {
  nome: string;
  tipo: string;
  status: string;
  localizacao: Localizacao;
  responsaveis: Responsaveis;
  descricao: string;
  dataInicio: string;
  dataPrevista: string;
  valorTotal: string;
  valorMedio: string;
  blocos: Array<{
    id: number;
    nome: string;
    totalAndares: number;
    unidadesPorAndar: number;
  }>;
  tiposApartamento: Array<{
    id: number;
    nome: string;
    tipologia: string;
    areaPrivativa: string;
    vagasGaragem: number;
    planta: File | null;
    preco: string;
  }>;
}

function Empreendimentos() {
  // Mock data limpo e consistente
  const mockEmpreendimentos: Empreendimento[] = [
    {
      id: '1',
      nome: 'Residencial Solar das Flores',
      tipo: 'residencial',
      status: 'vendas',
      imagem: 'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=800',
      localizacao: {
        endereco: 'Rua das Palmeiras, 1500 - Centro',
        cidade: 'Florianópolis',
        estado: 'SC',
        cep: '88010-120',
        bairro: 'Centro'
      },
      unidadesTotal: 120,
      unidadesVendidas: 45,
      unidadesReservadas: 25,
      valorTotal: 'R$ 24.000.000',
      valorMedio: 350000,
      dataInicio: '2024-01-15',
      dataPrevista: '2025-12-30',
      descricao: 'Empreendimento residencial de alto padrão com 120 unidades, localizado no coração de Florianópolis.',
      responsaveis: {
        tecnico: 'Eng. João Silva',
        comercial: 'Maria Santos',
        juridico: 'Dr. Carlos Oliveira'
      },
      tiposUnidade: [
        { 
          nome: 'Tipo 1', 
          tipologia: '2 quartos', 
          areaPrivativa: '65m²', 
          vagasGaragem: 1, 
          quantidade: 60, 
          preco: 'R$ 320.000' 
        },
        { 
          nome: 'Tipo 2', 
          tipologia: '3 quartos', 
          areaPrivativa: '85m²', 
          vagasGaragem: 2, 
          quantidade: 60, 
          preco: 'R$ 450.000' 
        }
      ],
      blocos: [
        {
          id: 'bloco1',
          nome: 'Bloco A',
          totalAndares: 10,
          unidadesPorAndar: 4,
          tipos: [
            {
              id: 'tipo1',
              nome: 'Tipo 1',
              tipologia: '2 quartos',
              areaPrivativa: 65,
              vagas: 1,
              valor: 320000
            }
          ]
        }
      ],
      datas: {
        inicio: '2024-01-15',
        previsaoTermino: '2025-12-30'
      }
    },
    {
      id: '2', 
      nome: 'Comercial Business Center',
      tipo: 'comercial',
      status: 'construcao',
      imagem: 'https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=800',
      localizacao: {
        endereco: 'Av. Principal, 2000 - Empresarial',
        cidade: 'São Paulo',
        estado: 'SP',
        cep: '01310-100',
        bairro: 'Empresarial'
      },
      unidadesTotal: 50,
      unidadesVendidas: 20,
      unidadesReservadas: 15,
      valorTotal: 'R$ 15.000.000',
      valorMedio: 250000,
      dataInicio: '2024-03-01',
      dataPrevista: '2025-08-15',
      descricao: 'Centro empresarial moderno com salas comerciais de diversos tamanhos.',
      responsaveis: {
        tecnico: 'Eng. Ana Costa',
        comercial: 'Pedro Lima',
        juridico: 'Dra. Julia Mendes'
      },
      tiposUnidade: [
        { 
          nome: 'Sala Pequena', 
          tipologia: 'Comercial', 
          areaPrivativa: '30m²', 
          vagasGaragem: 1, 
          quantidade: 25, 
          preco: 'R$ 180.000' 
        },
        { 
          nome: 'Sala Grande', 
          tipologia: 'Comercial', 
          areaPrivativa: '60m²', 
          vagasGaragem: 2, 
          quantidade: 25, 
          preco: 'R$ 350.000' 
        }
      ],
      blocos: [
        {
          id: 'bloco1',
          nome: 'Torre Comercial',
          totalAndares: 15,
          unidadesPorAndar: 3,
          tipos: [
            {
              id: 'sala1',
              nome: 'Sala Pequena',
              tipologia: 'Comercial',
              areaPrivativa: 30,
              vagas: 1,
              valor: 180000

### FILE: src/pages/Engenharia.tsx
import React from 'react';

const Engenharia: React.FC = () => {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Engenharia (Acompanhamento de Obra)</h1>
        <p className="text-gray-600">Controle completo de obras e execução</p>
      </div>
      <div className="card p-6">
        <p className="text-gray-600">Módulo Engenharia será implementado aqui.</p>
        <div className="mt-4 space-y-2 text-sm text-gray-500">
          <p>• Etapas da obra com cronograma</p>
          <p>• Diário de obra com fotos e documentos</p>
          <p>• Medições e aprovações de empreiteiras</p>
          <p>• Controle de consumo de materiais</p>
          <p>• Gestão de equipes e produtividade</p>
        </div>
      </div>
    </div>
  );
};

export default Engenharia;
### FILE: src/pages/Financeiro.tsx
import React from 'react';

const Financeiro: React.FC = () => {
  return (
    <div>
      <h1>Financeiro</h1>
      <p>Página financeira será implementada aqui.</p>
    </div>
  );
};

export default Financeiro;
### FILE: src/pages/Imoveis.tsx
import React from 'react';

const Imoveis: React.FC = () => {
  return (
    <div>
      <h1>Imóveis</h1>
      <p>Página de imóveis será implementada aqui.</p>
    </div>
  );
};

export default Imoveis;
### FILE: src/pages/Juridico.tsx
import React, { useState } from 'react';
import { Routes, Route, useNavigate, useParams } from 'react-router-dom';
import {
  PlusIcon,
  MagnifyingGlassIcon,
  ScaleIcon,
  DocumentTextIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  EyeIcon,
  PencilIcon,
  TrashIcon,
  DocumentArrowDownIcon,
  DocumentDuplicateIcon,
  UserGroupIcon,
  BuildingOfficeIcon,
  CurrencyDollarIcon,
  CalendarDaysIcon,
  PencilSquareIcon
} from '@heroicons/react/24/outline';

// Types
interface Cliente {
  id: string;
  nome: string;
  cpfCnpj: string;
  email: string;
  telefone: string;
}

interface Imovel {
  id: string;
  codigo: string;
  endereco: string;
  empreendimento: string;
}

interface MinutaTemplate {
  id: string;
  nome: string;
  tipo: 'venda' | 'reserva' | 'locacao' | 'permuta' | 'administracao';
  descricao: string;
  conteudo: string;
  variaveis: string[];
  dataAtualizacao: string;
  ativo: boolean;
}

interface Contrato {
  id: string;
  numero: string;
  tipo: 'venda' | 'reserva' | 'locacao' | 'permuta' | 'administracao';
  status: 'rascunho' | 'pendente' | 'em_vigor' | 'finalizado' | 'rescindido';
  cliente: Cliente;
  incorporadora: {
    id: string;
    nome: string;
  };
  imovel: Imovel;
  valores: {
    valorTotal: number;
    valorPago: number;
    saldoDevedor: number;
    formaPagamento: string;
  };
  datas: {
    assinatura?: string;
    inicio: string;
    fim?: string;
    proximoVencimento?: string;
  };
  clausulas: {
    reajuste?: string;
    multa?: number;
    observacoes?: string;
  };
  minutaUsada: string;
  versao: number;
  documentos: string[];
  dataInclusao: string;
  dataAtualizacao: string;
  assinaturaDigital: {
    cliente: boolean;
    incorporadora: boolean;
    dataAssinatura?: string;
  };
}

// Mock data
const mockMinutas: MinutaTemplate[] = [
  {
    id: '1',
    nome: 'Contrato de Compra e Venda Padrão',
    tipo: 'venda',
    descricao: 'Modelo padrão para venda de imóveis residenciais',
    conteudo: 'Contrato de compra e venda entre {{nomeCliente}} e {{nomeIncorporadora}}...',
    variaveis: ['nomeCliente', 'nomeIncorporadora', 'enderecoImovel', 'valorCompra', 'formaPagamento'],
    dataAtualizacao: '2024-07-15',
    ativo: true
  },
  {
    id: '2',
    nome: 'Termo de Reserva',
    tipo: 'reserva',
    descricao: 'Termo de reserva com sinal de entrada',
    conteudo: 'Termo de reserva da unidade {{unidade}} para {{nomeCliente}}...',
    variaveis: ['nomeCliente', 'unidade', 'valorSinal', 'prazoReserva'],
    dataAtualizacao: '2024-07-10',
    ativo: true
  },
  {
    id: '3',
    nome: 'Contrato de Locação Residencial',
    tipo: 'locacao',
    descricao: 'Modelo para contratos de aluguel residencial',
    conteudo: 'Contrato de locação entre {{nomeProprietario}} e {{nomeLocatario}}...',
    variaveis: ['nomeProprietario', 'nomeLocatario', 'enderecoImovel', 'valorAluguel', 'prazoLocacao'],
    dataAtualizacao: '2024-07-20',
    ativo: true
  }
];

const mockContratos: Contrato[] = [
  {
    id: '1',
    numero: 'CT-2024-001',
    tipo: 'venda',
    status: 'em_vigor',
    cliente: {
      id: '1',
      nome: 'João Silva Santos',
      cpfCnpj: '123.456.789-00',
      email: 'joao.silva@email.com',
      telefone: '(11) 99999-9999'
    },
    incorporadora: {
      id: '1',
      nome: 'Construtora Premium Ltda'
    },
    imovel: {
      id: '1',
      codigo: 'AP-101-A',
      endereco: 'Rua das Flores, 123 - Apto 101 Bloco A',
      empreendimento: 'Residencial Jardim das Flores'
    },
    valores: {
      valorTotal: 450000,
      valorPago: 180000,
      saldoDevedor: 270000,
      formaPagamento: 'Financiamento + Recursos Próprios'
    },
    datas: {
      assinatura: '2024-03-15',
      inicio: '2024-03-15',
      fim: '2026-03-15',
      proximoVencimento: '2024-08-15'
    },
    clausulas: {
      reajuste: 'INCC até entrega das chaves, IPCA após',
      multa: 2,
      observacoes: 'Entrega prevista para dezembro/2025'
    },
    minutaUsada: 'Contrato de Compra e Venda Padrão',
    versao: 2,
    documentos: ['CT-2024-001_v2.pdf', 'RG_Cliente.pdf', 'CPF_Cliente.pdf'],
    dataInclusao: '2024-03-10',
    dataAtualizacao: '2024-07-20',
    assinaturaDigital: {
      cliente: true,
      incorporadora: true,
      dataAssinatura: '2024-03-15'
    }
  },
  {
    id: '2',
    numero: 'TR-2024-005',
    tipo: 'reserva',
    status: 'pendente',
    cliente: {
      id: '2',
      nome: 'Maria Oliveira Costa',
      cpfCnpj: '987.654.321-00',
      email: 'maria.costa@email.com',
      telefone: '(11) 98888-8888'
    },
    incorporadora: {
      id: '1',
      nome: 'Construtora Premium Ltda'
    },
    imovel: {
      id: '2',
      codigo: 'AP-205-B',
      endereco: 'Av. Central, 456 - Apto 205 Bloco B',
      empreendimento: 'Edifício Harmony'
    },
    valores: {
      valorTotal: 380000,
      valorPago: 38000,
      saldoDevedor: 342000,
      formaPagamento: 'Sinal + Financiamento'
    },
    datas: {
      inicio: '2024-07-20',
      proximoVencimento: '2024-08-20'
    },
    clausulas: {
      observacoes: 'Prazo de reserva: 30 dias'
    },
    minutaUsada: 'Termo de Reserva',
    versao: 1,
    documentos: ['TR-2024-005_v1.pdf'],
    dataInclusao: '2024-07-20',
    dataAtualizacao: '2024-07-20',
    assinaturaDigital: {
      cliente: false,
      incorporadora: false
    }
  }
];

### FILE: src/pages/Pessoas.tsx
import React, { useState } from 'react';
import { Routes, Route, useNavigate, useParams } from 'react-router-dom';
import {
  PlusIcon,
  MagnifyingGlassIcon,
  UserGroupIcon,
  BuildingOfficeIcon,
  UserIcon,
  BriefcaseIcon,
  DocumentTextIcon,
  EyeIcon,
  PencilIcon,
  TrashIcon,
  ArrowPathIcon,
  PhoneIcon,
  EnvelopeIcon,
  MapPinIcon,
  TagIcon,
  ClipboardDocumentListIcon,
  ChartBarIcon,
  ChatBubbleOvalLeftEllipsisIcon,
  BanknotesIcon
} from '@heroicons/react/24/outline';

// Types
interface Endereco {
  logradouro: string;
  numero: string;
  bairro: string;
  cidade: string;
  cep: string;
  estado: string;
}

interface Documento {
  id: string;
  tipo: string;
  categoria: string;
  nomeArquivo: string;
  dataUpload: string;
  tamanho: string;
}

interface UnidadeAdquirida {
  id: string;
  empreendimento: string;
  unidade: string;
  valorCompra: number;
  valorAtual: number;
  status: 'quitado' | 'financiamento' | 'contrato' | 'pendente';
  dataAquisicao: string;
}

interface Pessoa {
  id: string;
  tipo: 'cliente' | 'lead' | 'fornecedor' | 'colaborador';
  pessoaFisica: boolean;
  nome: string;
  cpfCnpj: string;
  telefone: string;
  email: string;
  endereco: Endereco;
  tags: string[];
  observacoes: string;
  documentos: Documento[];
  dataInclusao: string;
  dataAtualizacao: string;
  status: 'ativo' | 'inativo' | 'suspenso';
  
  // Campos específicos por tipo
  unidadesAdquiridas?: UnidadeAdquirida[];
  produtosServicos?: string;
  categoria?: string;
  contratosPrestacao?: string[];
  advertencias?: Documento[];
  atestadosMedicos?: Documento[];
}

// Mock data
const mockPessoas: Pessoa[] = [
  {
    id: '1',
    tipo: 'cliente',
    pessoaFisica: true,
    nome: 'João Silva Santos',
    cpfCnpj: '123.456.789-00',
    telefone: '(11) 99999-9999',
    email: 'joao.silva@email.com',
    endereco: {
      logradouro: 'Rua das Palmeiras',
      numero: '100',
      bairro: 'Vila Madalena',
      cidade: 'São Paulo',
      cep: '05435-000',
      estado: 'SP'
    },
    tags: ['vip', 'investidor'],
    observacoes: 'Cliente há 5 anos. Comprou 3 unidades.',
    documentos: [
      {
        id: '1',
        tipo: 'RG',
        categoria: 'Documentação Pessoal',
        nomeArquivo: 'rg_joao.pdf',
        dataUpload: '2024-01-15',
        tamanho: '2.1 MB'
      }
    ],
    dataInclusao: '2024-01-10',
    dataAtualizacao: '2024-07-20',
    status: 'ativo',
    unidadesAdquiridas: [
      {
        id: '1',
        empreendimento: 'Residencial Jardim',
        unidade: 'Apto 101 - Bloco A',
        valorCompra: 350000,
        valorAtual: 420000,
        status: 'quitado',
        dataAquisicao: '2023-03-15'
      }
    ]
  },
  {
    id: '2',
    tipo: 'lead',
    pessoaFisica: true,
    nome: 'Maria Oliveira Costa',
    cpfCnpj: '987.654.321-00',
    telefone: '(11) 98888-8888',
    email: 'maria.costa@email.com',
    endereco: {
      logradouro: 'Av. Paulista',
      numero: '1000',
      bairro: 'Bela Vista',
      cidade: 'São Paulo',
      cep: '01310-100',
      estado: 'SP'
    },
    tags: ['quente', 'primeiro_imovel'],
    observacoes: 'Interessada em apartamento 2 dormitórios. Orçamento até R$ 400k.',
    documentos: [],
    dataInclusao: '2024-07-15',
    dataAtualizacao: '2024-07-25',
    status: 'ativo'
  },
  {
    id: '3',
    tipo: 'fornecedor',
    pessoaFisica: false,
    nome: 'Construtora ABC Ltda',
    cpfCnpj: '12.345.678/0001-90',
    telefone: '(11) 3333-3333',
    email: 'contato@construtorabc.com',
    endereco: {
      logradouro: 'Rua Comercial',
      numero: '500',
      bairro: 'Centro',
      cidade: 'São Paulo',
      cep: '01000-000',
      estado: 'SP'
    },
    tags: ['construcao', 'parceiro'],
    observacoes: 'Fornecedor de materiais de construção. Parceiro há 8 anos.',
    documentos: [],
    dataInclusao: '2024-02-20',
    dataAtualizacao: '2024-07-22',
    status: 'ativo',
    produtosServicos: 'Materiais de construção, Mão de obra especializada',
    categoria: 'Construção Civil'
  }
];

const Pessoas: React.FC = () => {
  return (
    <Routes>
      <Route index element={<PessoasOverview />} />
      <Route path="clientes" element={<PessoasList tipo="cliente" />} />
      <Route path="leads" element={<PessoasList tipo="lead" />} />
      <Route path="fornecedores" element={<PessoasList tipo="fornecedor" />} />
      <Route path="colaboradores" element={<PessoasList tipo="colaborador" />} />
      <Route path=":tipo/novo" element={<PessoaForm />} />
      <Route path=":tipo/:id/editar" element={<PessoaForm />} />
      <Route path=":tipo/:id" element={<PessoaDetails />} />
    </Routes>
  );
};

// Overview do módulo
const PessoasOverview: React.FC = () => {
  const navigate = useNavigate();
  const [pessoas] = useState<Pessoa[]>(mockPessoas);

  const estatisticas = {
    clientes: pessoas.filter(p => p.tipo === 'cliente').length,
    leads: pessoas.filter(p => p.tipo === 'lead').length,
    fornecedores: pessoas.filter(p => p.tipo === 'fornecedor').length,
    colaboradores: pessoas.filter(p => p.tipo === 'colaborador').length
  };

  const cards = [
    {
      titulo: 'Clientes',
      valor: estatisticas.clientes,
      href: '/pessoas/clientes',
      icon: UserGroupIcon,
      cor: 'bg-blue-500',
      corFundo: 'bg-blue-50',
      descricao: 'Proprietários e compradores'
    },
    {
      titulo: 'Leads',
      valor: estatisticas.leads,
      href: '/pessoas/leads',
      icon: UserIcon,
      cor: 'bg-green-500',
      corFundo: 'bg-green-50',
      descricao: 'Prospects em negociação'
    },
    {

### FILE: src/pages/PosVenda.tsx
import React from 'react';

const PosVenda: React.FC = () => {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Pós-venda (Garantia e Atendimento)</h1>
        <p className="text-gray-600">Gestão de chamados, garantias e relacionamento pós-entrega</p>
      </div>
      <div className="card p-6">
        <p className="text-gray-600">Módulo Pós-venda será implementado aqui.</p>
        <div className="mt-4 space-y-2 text-sm text-gray-500">
          <p>• Abertura de chamados pelo cliente</p>
          <p>• Triagem e atribuição técnica</p>
          <p>• Controle de prazos de garantia</p>
          <p>• Registro de visitas e ações realizadas</p>
          <p>• Enquetes de satisfação</p>
        </div>
      </div>
    </div>
  );
};

export default PosVenda;
### FILE: src/pages/Relatorios.tsx
import React from 'react';

const Relatorios: React.FC = () => {
  return (
    <div>
      <h1>Relatórios</h1>
      <p>Página de relatórios será implementada aqui.</p>
    </div>
  );
};

export default Relatorios;
