// Integra√ß√£o WhatsApp com CRM - Comandos para Anota√ß√µes e Mudan√ßa de Est√°gio

export interface WhatsAppCommand {
  comando: string;
  leadId: string;
  texto: string;
  remetente: string;
  timestamp: number;
}

export interface CrmAction {
  type: 'anotacao' | 'mudanca_estagio' | 'agendar_tarefa' | 'atribuir_responsavel';
  leadId: string;
  dados: any;
  autorId: string;
  timestamp: number;
}

class WhatsAppCrmIntegration {
  private comandosDisponiveis = {
    // Anota√ß√µes
    '/nota': { acao: 'anotacao', descricao: 'Adicionar anota√ß√£o ao lead' },
    '/obs': { acao: 'anotacao', descricao: 'Adicionar observa√ß√£o ao lead' },
    
    // Mudan√ßas de est√°gio
    '/lead': { acao: 'mudanca_estagio', estagio: 'lead', descricao: 'Mover para Lead' },
    '/interessado': { acao: 'mudanca_estagio', estagio: 'interessado', descricao: 'Mover para Interessado' },
    '/negociacao': { acao: 'mudanca_estagio', estagio: 'negociacao', descricao: 'Mover para Negocia√ß√£o' },
    '/proposta': { acao: 'mudanca_estagio', estagio: 'proposta', descricao: 'Mover para Proposta' },
    '/fechado': { acao: 'mudanca_estagio', estagio: 'fechado', descricao: 'Mover para Fechado' },
    '/perdido': { acao: 'mudanca_estagio', estagio: 'perdido', descricao: 'Mover para Perdido' },
    
    // Tarefas e respons√°veis
    '/agendar': { acao: 'agendar_tarefa', descricao: 'Agendar tarefa/follow-up' },
    '/responsavel': { acao: 'atribuir_responsavel', descricao: 'Alterar respons√°vel' },
    
    // Comandos especiais
    '/status': { acao: 'consultar_status', descricao: 'Consultar status do lead' },
    '/help': { acao: 'ajuda', descricao: 'Mostrar comandos dispon√≠veis' }
  };

  private emojisEstagios = {
    'lead': 'üÜï',
    'interessado': 'üëÄ',
    'negociacao': 'üí¨',
    'proposta': 'üìÑ',
    'fechado': 'üéâ',
    'perdido': '‚ùå'
  };

  processarMensagemWhatsApp(mensagem: string, remetente: string, leadId?: string): CrmAction | null {
    const agora = Date.now();
    
    // Verificar se a mensagem cont√©m um comando
    const comando = this.extrairComando(mensagem);
    if (!comando) return null;

    // Se n√£o h√° leadId, tentar extrair da mensagem
    if (!leadId) {
      leadId = this.extrairLeadId(mensagem);
      if (!leadId) return null;
    }

    const acao = this.comandosDisponiveis[comando.comando as keyof typeof this.comandosDisponiveis];
    if (!acao) return null;

    switch (acao.acao) {
      case 'anotacao':
        return this.criarAcaoAnotacao(comando, leadId, remetente, agora);
      
      case 'mudanca_estagio':
        return this.criarAcaoMudancaEstagio(comando, leadId, remetente, agora, acao);
      
      case 'agendar_tarefa':
        return this.criarAcaoAgendarTarefa(comando, leadId, remetente, agora);
      
      case 'atribuir_responsavel':
        return this.criarAcaoAtribuirResponsavel(comando, leadId, remetente, agora);
      
      default:
        return null;
    }
  }

  private extrairComando(mensagem: string): { comando: string; texto: string } | null {
    const regex = /^(\/\w+)\s*(.*)/;
    const match = mensagem.trim().match(regex);
    
    if (match) {
      return {
        comando: match[1],
        texto: match[2].trim()
      };
    }
    
    return null;
  }

  private extrairLeadId(mensagem: string): string | null {
    // Buscar padr√µes como #LEAD123 ou @lead123
    const patterns = [
      /#LEAD(\d+)/i,
      /@lead(\d+)/i,
      /lead[:\s]+(\d+)/i
    ];
    
    for (const pattern of patterns) {
      const match = mensagem.match(pattern);
      if (match) {
        return match[1];
      }
    }
    
    return null;
  }

  private criarAcaoAnotacao(comando: { comando: string; texto: string }, leadId: string, remetente: string, timestamp: number): CrmAction {
    return {
      type: 'anotacao',
      leadId,
      dados: {
        texto: comando.texto,
        emoji: this.selecionarEmojiAutomatico(comando.texto),
        origem: 'whatsapp'
      },
      autorId: remetente,
      timestamp
    };
  }

  private criarAcaoMudancaEstagio(comando: { comando: string; texto: string }, leadId: string, remetente: string, timestamp: number, acao: any): CrmAction {
    return {
      type: 'mudanca_estagio',
      leadId,
      dados: {
        novoEstagio: acao.estagio,
        motivo: comando.texto || 'Alterado via WhatsApp',
        emoji: this.emojisEstagios[acao.estagio as keyof typeof this.emojisEstagios]
      },
      autorId: remetente,
      timestamp
    };
  }

  private criarAcaoAgendarTarefa(comando: { comando: string; texto: string }, leadId: string, remetente: string, timestamp: number): CrmAction {
    const dataHora = this.extrairDataHora(comando.texto);
    
    return {
      type: 'agendar_tarefa',
      leadId,
      dados: {
        descricao: comando.texto,
        dataHora: dataHora || new Date(timestamp + 24 * 60 * 60 * 1000), // Padr√£o: amanh√£
        origem: 'whatsapp'
      },
      autorId: remetente,
      timestamp
    };
  }

  private criarAcaoAtribuirResponsavel(comando: { comando: string; texto: string }, leadId: string, remetente: string, timestamp: number): CrmAction {
    return {
      type: 'atribuir_responsavel',
      leadId,
      dados: {
        novoResponsavel: comando.texto,
        motivo: 'Atribu√≠do via WhatsApp'
      },
      autorId: remetente,
      timestamp
    };
  }

  private selecionarEmojiAutomatico(texto: string): string {
    const palavrasChave = {
      'üí∞': ['dinheiro', 'valor', 'pre√ßo', 'financiamento', 'pagamento', 'or√ßamento'],
      'üè¶': ['banco', 'financiamento', 'cr√©dito', 'empr√©stimo', 'aprova√ß√£o'],
      '‚è∞': ['prazo', 'urgente', 'deadline', 'data', 'quando'],
      'üìû': ['ligar', 'telefone', 'contato', 'retornar'],
      'üìÖ': ['agendar', 'reuni√£o', 'visita', 'encontro'],
      'üî•': ['interessado', 'quente', 'urgente', 'motivado'],
      'üòä': ['satisfeito', 'feliz', 'positivo', 'gostou'],
      'ü§î': ['d√∫vida', 'pensando', 'considerando', 'analisando'],
      'üè¢': ['im√≥vel', 'apartamento', 'casa', 'propriedade'],
      'üìù': ['observa√ß√£o', 'nota', 'lembrar', 'importante']
    };

    const textoLower = texto.toLowerCase();
    
    for (const [emoji, palavras] of Object.entries(palavrasChave)) {
      if (palavras.some(palavra => textoLower.includes(palavra))) {
        return emoji;
      }
    }
    
    return 'üìù'; // Emoji padr√£o
  }

  private extrairDataHora(texto: string): Date | null {
    // Padr√µes para extrair data e hora
    const patterns = [
      /(\d{1,2})\/(\d{1,2})(?:\/(\d{2,4}))?\s+(\d{1,2}):(\d{2})/,
      /(\d{1,2})\/(\d{1,2})(?:\/(\d{2,4}))?/,
      /(hoje|amanh√£|segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo)\s+(\d{1,2}):(\d{2})/i,
      /(hoje|amanh√£)\s+(\d{1,2})h/i
    ];

    for (const pattern of patterns) {
      const match = texto.match(pattern);
      if (match) {
        // Implementar parsing de data baseado no padr√£o encontrado
        // Esta √© uma implementa√ß√£o simplificada
        return new Date(); // Retornar data parseada
      }
    }

    return null;
  }

  // Gerar resposta autom√°tica para WhatsApp
  gerarRespostaWhatsApp(acao: CrmAction, leadNome?: string): string {
    const leadInfo = leadNome ? ` para ${leadNome}` : '';
    
    switch (acao.type) {
      case 'anotacao':
        return `‚úÖ Anota√ß√£o adicionada${leadInfo}\n\n${acao.dados.emoji} "${acao.dados.texto}"\n\n‚è∞ ${new Date(acao.timestamp).toLocaleString('pt-BR')}`;
      
      case 'mudanca_estagio':
        return `‚úÖ Lead movido${leadInfo}\n\n${acao.dados.emoji} Novo est√°gio: ${acao.dados.novoEstagio}\nüí¨ Motivo: ${acao.dados.motivo}\n\n‚è∞ ${new Date(acao.timestamp).toLocaleString('pt-BR')}`;
      
      case 'agendar_tarefa':
        return `‚úÖ Tarefa agendada${leadInfo}\n\nüìÖ ${acao.dados.descricao}\n‚è∞ ${new Date(acao.dados.dataHora).toLocaleString('pt-BR')}`;
      
      case 'atribuir_responsavel':
        return `‚úÖ Respons√°vel alterado${leadInfo}\n\nüë§ Novo respons√°vel: ${acao.dados.novoResponsavel}\n‚è∞ ${new Date(acao.timestamp).toLocaleString('pt-BR')}`;
      
      default:
        return '‚úÖ A√ß√£o executada com sucesso!';
    }
  }

  // Gerar mensagem de ajuda
  gerarMensagemAjuda(): string {
    let mensagem = `ü§ñ *COMANDOS CRM via WhatsApp*\n\n`;
    mensagem += `üìù *ANOTA√á√ïES:*\n`;
    mensagem += `/nota #LEAD123 Texto da anota√ß√£o\n`;
    mensagem += `/obs #LEAD123 Observa√ß√£o importante\n\n`;
    
    mensagem += `üîÑ *MUDAN√áA DE EST√ÅGIO:*\n`;
    mensagem += `/lead #LEAD123 Motivo\n`;
    mensagem += `/interessado #LEAD123 Motivo\n`;
    mensagem += `/negociacao #LEAD123 Motivo\n`;
    mensagem += `/proposta #LEAD123 Motivo\n`;
    mensagem += `/fechado #LEAD123 Motivo\n`;
    mensagem += `/perdido #LEAD123 Motivo\n\n`;
    
    mensagem += `üìÖ *TAREFAS:*\n`;
    mensagem += `/agendar #LEAD123 Visita amanh√£ 14:00\n`;
    mensagem += `/responsavel #LEAD123 Jo√£o Silva\n\n`;
    
    mensagem += `‚ÑπÔ∏è *CONSULTAS:*\n`;
    mensagem += `/status #LEAD123\n`;
    mensagem += `/help\n\n`;
    
    mensagem += `üí° *Exemplo de uso:*\n`;
    mensagem += `/nota #LEAD123 üè¶ Cliente tem financiamento pr√©-aprovado pelo Santander`;
    
    return mensagem;
  }

  // Processar webhook do WhatsApp
  async processarWebhookWhatsApp(dadosWebhook: any): Promise<CrmAction[]> {
    const acoes: CrmAction[] = [];
    
    try {
      // Processar mensagens recebidas
      if (dadosWebhook.messages) {
        for (const mensagem of dadosWebhook.messages) {
          const acao = this.processarMensagemWhatsApp(
            mensagem.body,
            mensagem.from,
            this.extrairLeadId(mensagem.body)
          );
          
          if (acao) {
            acoes.push(acao);
            
            // Enviar resposta autom√°tica
            const resposta = this.gerarRespostaWhatsApp(acao);
            await this.enviarMensagemWhatsApp(mensagem.from, resposta);
          }
        }
      }
    } catch (error) {
      console.error('Erro ao processar webhook WhatsApp:', error);
    }
    
    return acoes;
  }

  // Simular envio de mensagem WhatsApp (integra√ß√£o com API real)
  private async enviarMensagemWhatsApp(numero: string, mensagem: string): Promise<void> {
    try {
      // Em produ√ß√£o, integrar com API do WhatsApp Business
      console.log(`üì± Enviando WhatsApp para ${numero}:`, mensagem);
      
      // Simular delay de envio
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Aqui faria a chamada real para a API
      // await fetch('/api/whatsapp/send', {
      //   method: 'POST',
      //   body: JSON.stringify({ numero, mensagem })
      // });
      
    } catch (error) {
      console.error('Erro ao enviar mensagem WhatsApp:', error);
    }
  }
}

// Inst√¢ncia singleton
export const whatsappCrmIntegration = new WhatsAppCrmIntegration();

// Hook para React
export const useWhatsAppCrm = () => {
  return {
    processarMensagem: whatsappCrmIntegration.processarMensagemWhatsApp.bind(whatsappCrmIntegration),
    gerarAjuda: whatsappCrmIntegration.gerarMensagemAjuda.bind(whatsappCrmIntegration),
    processarWebhook: whatsappCrmIntegration.processarWebhookWhatsApp.bind(whatsappCrmIntegration)
  };
};

export default whatsappCrmIntegration;